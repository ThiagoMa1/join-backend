import { NextFunction, Request, Response } from "express";
import http from "http";
const { Op } = require("sequelize");

import db from "../../models/";

const Cliente = db.Cliente;
const Endere칞o = db.Endere칞o;

/////////////////////////////////// CREATE ///////////////////////////////////

// FUN칂츾O PARA USAR GEOCODING PARA PEGAR A LATITUDE E LONGITUDE, N츾O FOI USADO A API DO GOOGLE POR SER PAGA 0.005 USD per each(5.00 USD per 1000)
const useGeocoding = (cliente: any, endere칞o: any) => {
  const handleSpaces = (prop: string) => {
    return prop.split(" ").join("%20");
  };

  let data: any = "";
  const request = http.request(
    `http://api.opencagedata.com/geocode/v1/json?q=${handleSpaces(
      endere칞o.bairro
    )}+${handleSpaces(endere칞o.cidade)}+${handleSpaces(
      endere칞o.estado
    )}+Brasil+${
      endere칞o.cep
    }&key=4abf4c30125b4cf49618dad48c640627&language=en&pretty=1`,
    (response: any) => {
      response.on("data", (chunk: any) => {
        data += chunk;
      });

      // The whole response has been received. Print out the result.
      response.on("end", () => {
        data = JSON.parse(data);
        const geometry = data.results[0].geometry;
        return cliente.createEndere칞o({
          ...endere칞o,
          latitude: geometry.lat,
          longitude: geometry.lng,
        });
      });
    }
  );
  request.on("error", (error: Error) => {
    console.error(error);
  });
  request.end();
};

// CREATE AND CHECK IF THERE ALREADY HAS THE GIVEN CNPJ AND ALSO POPULATES THE "Endere칞o" TABLE
// CRIA E VERIFICA SE JA EXISTE ALGUM CLIENTE COM O CNPJ ENVIADO E TAMB칄M POPULA A TABELA "Endere칞o"
const postAddCliente = (req: Request, res: Response) => {
  const {
    cnpj,
    raz칚o_social,
    nome_do_contato,
    telefone,
    logradouro,
    n칰mero,
    complemento,
    bairro,
    cidade,
    estado,
    cep,
  } = req.body;

  const cnpjValidator = cnpj.toString().length;

  cnpjValidator !== 14 && res.send("CNPJ precisa ter 14 caracteres");

  cnpjValidator === 14 &&
    Cliente.findOne({ where: { cnpj: cnpj } })
      .then((cliente: any) => {
        if (cliente) {
          return res.send("Cliente j치 cadastrado");
        }
        res.send("Cliente cadastrado com sucesso!游봅");
        return Cliente.create({
          cnpj,
          raz칚o_social,
          nome_do_contato,
          telefone,
        });
      })
      .then((cliente: any) => {
        if (cliente.dataValues) {
          return useGeocoding(cliente, {
            logradouro,
            n칰mero,
            complemento,
            bairro,
            cidade,
            estado,
            cep,
          });
        }

        return res.send("Usu치rio criado sem endere칞o!");
      })
      .catch((err: Error) => res.status(400).send(err.message));
};

// ADICIONA ENDERE칂O AO USU츼RIO CORRESPONDENTE A "id" NO PARAMS DA URL
const postAddEndere칞o = (req: Request, res: Response) => {
  const clienteId = req.params.clienteId;
  const reqEndere칞o = req.body;
  let newCliente: any;

  Cliente.findOne({
    where: { id: clienteId },
  })
    .then((cliente: any) => {
      if (cliente) {
        newCliente = cliente;
        return cliente.getEndere칞os({
          where: {
            [Op.and]: [
              { bairro: reqEndere칞o.bairro },
              { n칰mero: reqEndere칞o.n칰mero },
              { cidade: reqEndere칞o.cidade },
            ],
          },
        });
      } else {
        return res.send("N칚o existe cliente com a id informada!");
      }
    })
    .then(async (endere칞o: any) => {
      if (!endere칞o.length) {
        await useGeocoding(newCliente, reqEndere칞o);
        return res.send("Endere칞o criado com sucesso!");
      } else {
        return res.send(
          "Endere칞o j치 cadastrado no cliente. Tente cadastrar outro."
        );
      }
    })
    .catch((err: Error) => res.send(err.message));
};

/////////////////////////////////// READ ///////////////////////////////////

// FIND AND SEND AN ARRAY WITH "id" AND "nome_do_contato" FIELDS OF ALL THE CLIENTES
// ENCONTRA E ENVIA UM ARRAY COM OS CAMPOS "id" E "nome_do_contato" DE TODOS OS CLIENTES
const getClientesNames = (req: Request, res: Response) => {
  Cliente.findAll({
    attributes: ["id", ["nome_do_contato", "Nome do Contato"]],
  })
    .then(([clientes]: any) => {
      if (!clientes) {
        return res.send("N칚o h치 clientes registrados");
      }
      return res.send(JSON.stringify(clientes, null, 2));
    })
    .catch((err: Error) => res.send(err.message));
};

// FIND AND SEND AN ARRAY WITH ALL THE INFORMATIONS ABOUT ALL THE CLIENTES
// ENCONTRA E ENVIA UM ARRAY COM TODAS AS INFORMA칂칏ES SOBRE TODOS OS CLIENTES
const getAllClientes = (req: Request, res: Response) => {
  Cliente.findAll({ include: Endere칞o })
    .then(([clientes]: any) => {
      if (!clientes) {
        return res.send("N칚o h치 clientes registrados");
      }
      return res.send(JSON.stringify(clientes, null, 2));
    })
    .catch((err: Error) => res.send(err.message));
};

// FIND A CLIENTE BY IT'S "id" AND SEND IT'S INFORMATIONS
// ENCONTRA UM CLIENTE PELA SUA "id" E ENVIA SUAS INFORMA칂칏ES
const getClienteById = (req: Request, res: Response) => {
  const clienteId = req.params.clienteId;
  Cliente.findOne({ where: { id: clienteId }, include: Endere칞o })
    .then((cliente: any) => {
      if (!cliente) {
        return res.send("N칚o existe cliente com a id informada!");
      }
      return res.send(JSON.stringify(cliente, null, 2));
    })
    .catch((err: Error) => res.send(err.message));
};

/////////////////////////////////// UPDATE ///////////////////////////////////

// EDIT A CLIENTE DATA BY IT'S "id"
// ALTERA OS DADOS DE UM CLIENTE PELA SUA "id"
const postEditClienteById = (req: Request, res: Response) => {
  const clienteId = req.params.clienteId;
  const changes = req.body;

  Cliente.update(changes, { where: { id: clienteId } })
    .then(([cliente]: any) => {
      if (cliente === 0) {
        return res.send(
          "O id informado n칚o corresponde a um endere칞o cadastrado!"
        );
      }
      return res.send("Cliente Alterado!");
    })
    .catch((err: Error) => res.send(err.message));
};

// EDIT A ENDERE칂O DATA BY IT'S CLIENTE "id"
// ALTERA OS DADOS DE UM ENDERE칂O PELO "id" DO CLIENTE(dono do endere칞o)
const postEditEndere칞oByIds = (req: Request, res: Response) => {
  const clienteId = req.params.clienteId;
  const enderecoId = req.params.enderecoId;
  const changes = req.body;

  Endere칞o.findOne({ where: { [Op.and]: [{ clienteId }, { id: enderecoId }] } })
    .then(async (endere칞o: any) => {
      if (!endere칞o) {
        return res.send(
          "Os ids informados n칚o correspondem a um endere칞o existente!"
        );
      }
      await endere칞o.update(changes);
      return res.send("Endere칞o Alterado!");
    })
    .catch((err: Error) => res.send(err.message));
};

/////////////////////////////////// DELETE ///////////////////////////////////

// DELETE UM CLIENTE COM O ID QUE 칄 PASSADO COMO PARAMETRO NA URL DA REQUISI칂츾O
const deleteClienteById = (req: Request, res: Response) => {
  const clienteId = req.params.clienteId;
  Endere칞o.destroy({ where: { clienteId } })
    .then(async (cliente: any) => {
      if (cliente === 0) {
        return res.send(
          "O id informado n칚o corresponde a um endere칞o cadastrado!"
        );
      }
      await Cliente.destroy({ where: { id: clienteId } });
      return res.send("Cliente exclu칤do com sucesso!");
    })
    .catch((err: Error) => res.send(err.message));
};

// ENCONTRA E DELETA UM ENDERE칂O DE UM CLIENTE COM OS RESPECTIVOS IDS PASSADOS COMO PARAMETRO NA URL DA REQUISI칂츾O
const deleteEndere칞oByIds = (req: Request, res: Response) => {
  const clienteId = req.params.clienteId;
  const enderecoId = req.params.enderecoId;

  Endere칞o.findOne({
    where: { [Op.and]: [{ clienteId: clienteId }, { id: enderecoId }] },
  })
    .then(async (endere칞o: any) => {
      if (!endere칞o) {
        return res.send(
          "Os ids informado n칚o correspondem a um endere칞o cadastrado!"
        );
      }
      await endere칞o.destroy();
      return res.send("Endere칞o exclu칤do com sucesso!");
    })
    .catch((err: Error) => res.send(err.message));
};

export const clientesController = {
  postAddCliente: postAddCliente,
  getClientesNames: getClientesNames,
  getAllClientes: getAllClientes,
  getClienteById: getClienteById,
  postEditClienteById: postEditClienteById,
  postEditEndere칞oByIds: postEditEndere칞oByIds,
  postAddEndere칞o: postAddEndere칞o,
  deleteClienteById: deleteClienteById,
  deleteEndere칞oByIds: deleteEndere칞oByIds,
};
